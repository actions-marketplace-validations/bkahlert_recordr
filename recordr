#!/usr/bin/env bash
#
# Recordr — automated terminal session recorder and SVG converter
# https://github.com/bkahlert/recordr
#
# MIT License
#
# Copyright (c) 2021 Dr. Björn Kahlert
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

export RECORDR_VERSION=SNAPSHOT
source logr.sh

# An associative array of supported terminal profiles.
# Keys are terminal profile file extensions and their values
# the ones supported by the `term` option of `svg-term`.
declare -A supported_profiles=(
  ['js']=hyper
  ['iterm''colors']=iterm2
  ['colorscheme']=konsole
  ['colors']=remmina
  ['terminal']=terminal
  ['config']=terminator
  ['config_0']=tilda
  ['theme']=xfce
  ['x''rdb']=xterm
  ['x''resources']=xresources
)

# Attempts to find a terminal profile in the specified path.
# Arguments:
#   1 - optional path to use (default: ./)
# Returns:
#   0 - always unless an unexpected error occurs
# Outputs:
#   STDOUT - the found terminal profile resp. the first one if multiple were found
#   STDERR - warning if multiple terminal profiles were found
find_term_profile() {
  local path=${1:-./}
  logr info "terminal profile search directory: $path" >&2

  local query='' ext
  for ext in "${!supported_profiles[@]}"; do
    [ ! "$query" ] || query+=' -o'
    query+=" -i""name *.$ext"
  done

  declare -a profiles=()
  # shellcheck disable=SC2086
  while IFS= read -r -d $'\0'; do
    profiles+=("$REPLY")
  done < <(find "${path%/}" -type f \( $query \) -print0)

  [ ! "${#profiles[@]}" -gt 1 ] || logr warn "multiple terminal profiles found: ${profiles[*]/#/$'\n   ▪ '}" >&2
  [ "${#profiles[@]}" -eq 0 ] || {
    logr success "terminal profile: ${profiles[0]}" >&2
    echo "${profiles[0]}"
  }
}

declare -A opts=(
  ['build-dir']=build/rec/ # path to store (intermediate) build artifacts
  ['out-dir']=docs/        # path to copy the created SVG files to
  ['term']=xterm-256color  # value to use for the TERM environmental variable
  ['indicator']=RECORDING  # name of the environmental variable set during recording
  ['columns']=132          # number of columns to use for recording and conversion
  ['rows']=25              # number of rows to use for recording and conversion
  ['restart-delay']=5      # number of seconds until the animation restart
  ['term-profile']=auto    # path to the terminal profile to use for conversion; [supported profiles](https://github.com/marionebl/term-schemes#supported-formats)
  ['parallel']=auto        # maximum number of conversions that run at once; 0 will run as many conversions as possible
)
[ ! "${TESTING-}" ] || opts['restart-delay']=1
declare -A flags=(
  ['hide-recording']='' # whether to hide the recording process
  ['delete-build']=''   # whether to delete intermediary build files on completion
)

declare raw=("$@") args=() usage='[OPTIONS] [DIR[/ ]FILE [FILE...]]'
while (($#)); do
  case $1 in
    -h | --help)
      # TODO move to logr
      # Parses this script for a line documenting the parameter and returns the comment.
      describe() { sed -En "/[[:space:]]+\['$1'].*#/p" "${BASH_SOURCE[0]}" | sed -E 's/[^#]*#[[:space:]]*(.*)$/\1/g'; }
      declare margin="$MARGIN  " options=() col_width=20
      for opt in "${!opts[@]}"; do
        options+=("$(printf -- '--%s%*s' "$opt" $((col_width - ${#opt})) '')" "$(describe "$opt") (default: ${opts[$opt]})")
      done
      for flag in "${!flags[@]}"; do
        options+=("$(printf -- '--%s%*s' "$flag" $((col_width - ${#flag})) '')" "$(describe "$flag") (default: ${flags[$flag]:-false})")
      done
      printf '\n   %s\n\n   Usage: recordr %s%s' "$(banr --static "recordr" "$RECORDR_VERSION")" "$usage" "

${MARGIN}Options:
$(printf "$margin"'%s %s\n' "${options[@]}")

${MARGIN}Files:
${margin}There are basically two ways to specify which ${esc_red-}● rec${esc_reset-} files to convert:
${margin}- ${esc_bold-}Convert a single file:${esc_reset-} ./recordr rec/foo.rec
${margin}  ${esc_italic-}same as:${esc_reset-} ./rec/foo.rec ${esc_italic-}(interpreter form)${esc_reset-}
${margin}  ${esc_italic-}same as:${esc_reset-} ./recordr --build-dir build/rec --out-dir docs rec/foo.rec ${esc_italic-}(explicit directories)${esc_reset-}

${margin}  ${esc_bold-}Before:${esc_reset-}
${margin}  ▤ work             ⬅︎ you are here
${margin}  └─▤ rec
${margin}    ├─${esc_red-}●${esc_reset-} foo.rec
${margin}    └─▤ bar
${margin}      └─${esc_red-}●${esc_reset-} baz.rec

${margin}  ${esc_bold-}After:${esc_reset-}
${margin}  ▤ work             ⬅︎ you are here
${margin}  ├─▤ rec
${margin}  │ ├─${esc_red-}●${esc_reset-} foo.rec
${margin}  │ └─▤ bar
${margin}  │   └─${esc_red-}●${esc_reset-} baz.rec
${margin}  ├─▤ build
${margin}  │ └─▤ rec
${margin}  │   ├─▢ foo.sh
${margin}  │   ├─▢ foo.svg.0
${margin}  │   ├─▢ foo.svg.⋮
${margin}  │   └─▢ foo.svg.n
${margin}  └─▤ docs
${margin}    └─${esc_red-}●${esc_reset-} foo.svg      ⬅︎ to SVG converted ${esc_red-}● rec${esc_reset-} file

${margin}- ${esc_bold-}Convert a file tree:${esc_reset-} ./recordr rec
${margin}  ${esc_italic-}same as:${esc_reset-} ./recordr ${esc_italic-}(default directory: rec)${esc_reset-}
${margin}  ${esc_italic-}same as:${esc_reset-} ./recordr --build-dir build/rec --out-dir docs rec ${esc_italic-}(explicit default directories)${esc_reset-}
${margin}  ${esc_italic-}same as:${esc_reset-} ./recordr rec foo.rec bar/baz.rec ${esc_italic-}(explicit files)${esc_reset-}

${margin}  ${esc_bold-}Before:${esc_reset-}
${margin}  ▤ work             ⬅︎ you are here
${margin}  └─▤ rec
${margin}    ├─${esc_red-}●${esc_reset-} foo.rec
${margin}    └─▤ bar
${margin}      └─${esc_red-}●${esc_reset-} baz.rec

${margin}  ${esc_bold-}After:${esc_reset-}
${margin}  ▤ work             ⬅︎ you are here
${margin}  ├─▤ rec
${margin}  │ ├─${esc_red-}●${esc_reset-} foo.rec
${margin}  │ └─▤ bar
${margin}  │   └─${esc_red-}●${esc_reset-} baz.rec
${margin}  ├─▤ build
${margin}  │ └─▤ rec
${margin}  │   ├─▢ foo.sh
${margin}  │   ├─▢ foo.svg.0
${margin}  │   ├─▢ foo.svg.⋮
${margin}  │   ├─▢ foo.svg.n
${margin}  │   └─▤ bar
${margin}  │     ├─▢ baz.sh
${margin}  │     ├─▢ baz.svg.0
${margin}  │     ├─▢ baz.svg.⋮
${margin}  │     └─▢ baz.svg.n
${margin}  └─▤ docs
${margin}    ├─${esc_red-}●${esc_reset-} foo.svg      ⬅︎ to SVG converted ${esc_red-}● rec${esc_reset-} file
${margin}    └─▤ bar
${margin}      └─${esc_red-}●${esc_reset-} baz.svg    ⬅︎ to SVG converted ${esc_red-}● rec${esc_reset-} file
"
      exit 0
      ;;

    # options
    --build-dir=*)
      opts['build-dir']=${1#*=} && shift
      ;;
    --build-dir)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['build-dir']=$2 && shift 2
      ;;
    --out-dir=*)
      opts['out-dir']=${1#*=} && shift
      ;;
    --out-dir)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['out-dir']=$2 && shift 2
      ;;
    --indicator=*)
      opts['indicator']=${1#*=} && shift
      ;;
    --indicator)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['indicator']=$2 && shift 2
      ;;
    --columns=*)
      opts['columns']=${1#*=} && shift
      ;;
    --columns)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['columns']=$2 && shift 2
      ;;
    --rows=*)
      opts['rows']=${1#*=} && shift
      ;;
    --rows)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['rows']=$2 && shift 2
      ;;
    --restart-delay=*)
      opts['restart-delay']=${1#*=} && shift
      ;;
    --restart-delay)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['restart-delay']=$2 && shift 2
      ;;
    --term=*)
      opts['term']=${1#*=} && shift
      ;;
    --term)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['term']=$2 && shift 2
      ;;
    --term-profile=*)
      opts['term-profile']=${1#*=} && shift
      ;;
    --term-profile)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['term-profile']=$2 && shift 2
      ;;
    --parallel=*)
      opts['parallel']=${1#*=} && shift
      ;;
    --parallel)
      [ "${2-}" ] || logr error --code "$EX_USAGE" "$1 is missing a value" --usage "$usage" -- "${raw[@]}"
      opts['parallel']=$2 && shift 2
      ;;

      # flags
    --delete-build=*)
      flags['delete-build']=${1#*=} && shift
      ;;
    --delete-build)
      [ "${2-}" = true ] || [ "${2-}" = false ] || set -- "$1" true "${@:2}"
      flags['delete-build']=$2 && shift 2
      ;;
    --hide-recording=*)
      flags['hide-recording']=${1#*=} && shift
      ;;
    --hide-recording)
      [ "${2-}" = true ] || [ "${2-}" = false ] || set -- "$1" true "${@:2}"
      flags['hide-recording']=$2 && shift 2
      ;;

      # unknown arguments
    --*)
      logr error --code "$EX_USAGE" "unknown option $1" --usage "$usage" -- "${raw[@]}"
      ;;

      # positional arguments
    *)
      args+=("$1") && shift
      ;;
  esac
done
set -- "${args[@]}"

# TODO move to logr
logr::diag() {
  local opt flag arg
  echo "$0"
  echo "  opts:"
  for opt in "${!opts[@]}"; do
    printf '    --%s=%q\n' "$opt" "${opts[$opt]}"
  done
  echo "  flags:"
  for flag in "${!flags[@]}"; do
    printf '    --%s=%q\n' "$flag" "${flags[$flag]}"
  done
  echo "  args:"
  for ((arg = 1; arg <= $#; arg++)); do
    printf '    %2d=%q\n' "$arg" "${@:arg:1}"
  done
}

# validate build-dir
[ -d "${opts['build-dir']}" ] || mkdir -p "${opts['build-dir']}" \
  || logr error --code "$EX_USAGE" "build-dir '${opts['build-dir']}' ($PWD/${opts['build-dir']}) could not be created: $(id -u) --- $(ls -lisanR "$PWD")"
[ -r "${opts['build-dir']}" ] || logr error --code "$EX_NOINPUT" "build-dir '${opts['build-dir']}' is not readable"

# validate out-dir
[ ! "${opts['out-dir']}" ] || {
  [ -d "${opts['out-dir']}" ] || mkdir -p "${opts['out-dir']}" \
    || logr error --code "$EX_CANTCREAT" "out-dir '${opts['out-dir']}' ($PWD/${opts['out-dir']}) could not be created"
  [ -w "${opts['out-dir']}" ] || logr error --code "$EX_CANTCREAT" "out-dir '${opts['out-dir']}' is not writable"
}

# validate parallel
[ ! "${opts['parallel']}" = "auto" ] || opts['parallel']=$(nproc 2>/dev/null || echo 4)
[ ! "${opts['parallel']}" ] || [ "${opts['parallel']}" -eq "${opts['parallel']}" ] 2>/dev/null \
  || logr error --code "$EX_DATAERR" "invalid --parallel value '${opts['parallel']}'"

# normalize files / pos. arguments to `base-dir` `file...`
[ $# -gt 0 ] || set -- rec                                             # [ ] -> base
[ -e "$1" ] || logr error --name "NOT FOUND" --code "$EX_NOINPUT" "$1" # validate base
[ ! -d "$1" ] || [ $# -ne 1 ] || {                                     # base -> base [file...]
  readarray -d '' files < <(cd "$1" && find . -name '*.rec' -print0)
  set -- "${1%/}" "${files[@]#./}"
}
[ ! -f "$1" ] || set -- "${1%/*}" "${1##*/}" "${@:2}" # base/file [file...] -> base file [file...]

# validate term
infocmp -T "${opts['term']}" &>/dev/null || logr error --code "$EX_USAGE" 'unknown terminal `'"${opts['term']}"'`'

# validate term-profile
[ ! "${opts['term-profile']}" = "auto" ] || opts['term-profile']=$(find_term_profile "$1") || {
  logr error --code "$EX_USAGE" "unexpected error while looking for a terminal profile" -- "$@"
}
[ -e "${opts['term-profile']}" ] || opts['term-profile']=''

# invoke self for each file -> recordr [OPTIONS] base file
[ $# -eq 2 ] || {
  declare args=()
  flags['hide-recording']=true
  echo "${esc_red-}●${esc_yellow-}◕${esc_reset-} ${esc_bold-}BATCH PROCESSING${esc_reset-}" >&2
  logr info "recordings directory: $1" >&2

  for opt in "${!opts[@]}"; do
    args+=("--$opt=${opts[$opt]}")
  done
  for flag in "${!flags[@]}"; do
    [ "${flags[$flag]:-false}" = false ] || args+=("--$flag")
  done

  declare -A exit_codes=()
  trap 'kill "${!exit_codes[@]}"' INT TERM
  declare count
  for file in "${@:2}"; do
    tmp=$(mktemp "${opts['build-dir']%/}/status-XXXXXX")
    (
      "$0" "${args[@]}" "$1" "$file" || echo "$?" >"$tmp"
      [ "$(cat "$tmp")" ] || echo "0" >"$tmp"
    ) &
    exit_codes["$!"]="$tmp"
    while true; do
      count="$(jobs -pr | sed -n '$=')"
      [ "${count:-0}" -ge "${opts['parallel']}" ] || break
      wait -n -p process || true
    done
  done

  declare failed=0 exit_code
  wait "${!exit_codes[@]}" || true
  for tmp in "${exit_codes[@]}"; do
    exit_code=''
    [ ! -f "$tmp" ] || {
      exit_code=$(cat "$tmp")
      rm -- "$tmp"
    }
    [ "${exit_code:--1}" -eq 0 ] || failed=$((failed + 1))
  done

  [ "$failed" -lt $# ] || logr fail --name "BATCH PROCESSING" >&2
  [ "$failed" -eq 0 ] || logr warn --name "BATCH PROCESSING" "COMPLETED WITH ERRORS" || exit $? >&2
  logr success --name "BATCH PROCESSING" "COMPLETED" >&2
  exit
}

# one arg left = relative path to rec file
declare rec_file=${2#./}                                         # e.g. foo.bar
declare real_rec_file=${1%/}/$rec_file                           # e.g. rec/foo.bar
[ -f "$real_rec_file" ] || real_rec_file=${real_rec_file%.*}.rec # e.g. rec/foo.rec
[ -e "$real_rec_file" ] || logr error --name "NOT FOUND" --code "$EX_USAGE" "$real_rec_file"
[ -r "$real_rec_file" ] || logr error --name "NOT READABLE" --code "$EX_NOINPUT" "$real_rec_file"

declare build_file=${opts['build-dir']%/}/${rec_file#/} # e.g. build/rec/foo.rec
declare recordable_file=${build_file%.rec}.sh           # e.g. build/rec/foo.sh
declare cast_file=${build_file%.rec}.cast               # e.g. build/rec/foo.rec
declare svg_file=${build_file%.rec}.svg                 # e.g. build/rec/foo.svg
mkdir -p "${build_file%/*}"

[ ! "${opts['out-dir']-}" ] || {
  declare out_file=${opts['out-dir']%/}/${rec_file#/} # e.g. docs/foo.rec
  declare out_svg_file=${out_file%.rec}.svg           # e.g. docs/foo.svg
  mkdir -p "${out_svg_file%/*}"
}

echo " ${esc_red-}●${esc_reset-} RECORDING: ${esc_bold-}${real_rec_file#./}${esc_reset-}" >&2
declare exit_code_printing_block='
  # highlight non-0 exit code
  [ "$_status" -eq 0 ] || {
    col=$(('"${opts['columns']-80}"' -"${#_status}" -3))
    esc_hpa_col=$(tput hpa "$col" || tput ch "$col")
    printf "%s%s%s %s %s\n" "$(tput cuu 1)${esc_hpa_col-}" "$(tput bold)$(tput "set""af" 1)" '↩' "$_status" "$(tput sgr0)"
  }
  echo
'
declare countdown_call="count_down ${opts['restart-delay']}"
{
  echo '#!/usr/bin/env bash'
  [ ! "${opts['indicator']-}" ] || echo "export ${opts['indicator']}=1"
  [ ! "${opts['columns']-}" ] || [ ! "${opts['rows']-}" ] || printf "printf '\e[8;%d;%dt'\n" "${opts['rows']}" "${opts['columns']}"
  # language=sh
  cat <<'INSTRUMENTATION'
# Restarts in the specified number of seconds
count_down() {
  local seconds=${1:-5}
  tput civis
  [ "$seconds" -gt 0 ] || return 0
  for ((i = 0; i < "$seconds"; i++)); do
    printf '%s%s' $((seconds - i)) "$(tput hpa 0)"
    sleep .5; tput 'c''norm'; sleep .5; tput civis
  done
}

declare _status=0
# Simulates a user typing in the specified command and executes it.
# Reads STDIN if no argument is passed.
rec() {
  local prompt="❱ "
  printf '%s%s' "$(tput 'set''af' 7)$prompt" "$(tput 'c''norm')"
  sleep 1
  local i j s min=10
  if [ "$#" -eq 0 ]; then
    set -- -1 eval "$(cat -)"
  else
    printf -v s '%q ' "$@"
    s=${s:0:$((${#s} -1))}
  fi
  # rec -n suppresses output of the first n arguments
  [[ ! "${1-}" =~ -[0-9]+ ]] || {
    s=${*:$((${1#-} +2))}
    shift
  }
  [ ! "${TESTING-}" ] || min=99999
  for ((i = 0, j = 0; i < ${#s}; i = i + j, j = "$min" + (RANDOM % 5))); do
    printf '%s' "${s:i:j}" && sleep .04
  done
  sleep .5; tput civis
  sleep .5; tput 'c''norm'
  printf "%s%s%s\n" "$(tput 'set''af' 8)$(tput hpa 0)$prompt" "$s" "$(tput sgr0)"
  tput civis
  local _status=0 tmp
  tmp=$(mktemp)

  "$@" > >(tee "$tmp")
  _status=$?

  # add eventually missing new line
  [ "$(du -k "$tmp" | cut -f1)" = 0 ] || [ "$(tail -c 1 "$tmp" | tr -Cd "\n" | tr "\n" 'n')" ] || {
    printf "%s%s%s\n" "$(tput 'sm''so')" "␊" "$(tput sgr0)"
  }
  rm -- "$tmp"
INSTRUMENTATION
  echo "$exit_code_printing_block"
  echo "}"
  echo "trap '$countdown_call' EXIT"
  echo "# END OF INSTRUMENTATION"
  echo "("
  cat "$real_rec_file"
  echo ') || _status=$?'
  echo "$exit_code_printing_block"
} >"$recordable_file"

[ ! -e "$cast_file" ] || rm -- "$cast_file"
(
  [ "${flags['hide-recording']:-false}" = false ] || exec &>/dev/null
  export TMPDIR
  TERM=${opts['term']-} \
    asciinema rec \
    --command "bash '$recordable_file'" \
    --quiet \
    "$cast_file" >&2
) || logr error --name "RECORDING" "asciinema did exit $? while recording $recordable_file"

echo " ${esc_yellow-}◔${esc_reset-} CONVERTING: ${esc_bold-}${cast_file#./}${esc_reset-}" >&2
declare -a svg_term_args=()
[ ! -e "$svg_file" ] || rm -- "$svg_file"
[ ! "${opts['columns']-}" ] || svg_term_args+=("--width" "${opts['columns']}")
[ ! "${opts['rows']-}" ] || svg_term_args+=("--height" "${opts['rows']}")
[ ! "${opts['term-profile']-}" ] || svg_term_args+=(
  "--term" "${supported_profiles["${opts['term-profile']##*.}"]}"
  "--profile" "$(cd "${opts['term-profile']%/*}" && pwd)/${opts['term-profile']##*/}"
)
(
  LC_ALL=C svg-term \
    --in "$cast_file" \
    --out "$svg_file" \
    --padding-x 20 \
    --padding-y 20 \
    ${svg_term_args[@]+"${svg_term_args[@]}"} \
    --window >&2
) || logr error --name "CONVERTING" "svg-term did exit $? while recording $cast_file"

[ ! "$(find "${svg_file%/*}" -name "${svg_file##*/}.*")" ] || rm -- "$svg_file".*
cp "$svg_file" "$svg_file.0" || logr fail -x "$svg_file"

# post-process SVG
echo " ${esc_yellow-}◑${esc_reset-} PATCHING: ${esc_bold-}${svg_file#./}.0${esc_reset-}" >&2
# replace deprecated xmlns:xlink by xlink, see https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/xlink:href
declare svg css=''
svg=$(
  LC_ALL=C sed \
    -e 's, xmlns:xlink="http://www.w3.org/1999/xlink",,g' \
    -e 's,xlink:href,href,g' \
    -e 's, font-family="[^"]*", class="container",g' \
    "$svg_file.0" \
    | tee "$svg_file.1"
)

# highlight links
echo " ${esc_yellow-}◕${esc_reset-} LINKING: ${esc_bold-}${svg_file#./}.1${esc_reset-}" >&2
svg=$(
  title='Displayed as link in supporting terminal emulators'
  optional='\{0\,1\}'
  plus='\{1\,\}'
  schema='[^:/?#<]'"$plus"
  host='\(//[^/?#<]*\)'"$optional"
  path='[^?#<]*'
  query='\(\?[^#<]*\)'"$optional"
  hash='\(#\([^<]*\)\)'"$optional"
  url='\('"$schema:$host$path$query$hash"'\)'
  LC_ALL=C sed 's,\(<text[^>]*>'"$url"'[^<]*</text>\),<a href="\2"><title>'"$title"'</title>\1</a>,g' \
    "$svg_file.1" \
    | tee "$svg_file.2"
)
cp "$svg_file.1" "$svg_file.2"

# highlight inserted line feeds
echo " ${esc_yellow-}●${esc_reset-} ANNOTATING: ${esc_bold-}${svg_file#./}.2${esc_reset-}" >&2
svg=$(
  LC_ALL=C sed 's,<path[^>]*>\(<text[^>]*>\)␊<,\1<tspan class="inserted-lf">⮐</tspan><,g' \
    "$svg_file.2" \
    | tee "$svg_file.3"
)
css+=".inserted-lf{fill:#999999;fill-opacity:.75;font-variant-position:sub;font-size:75%}"

# patch fonts
declare fonts
printf -v fonts ",'%s'" "JetBrains Mono" "Monaco" "Con""sol""as" "Men""lo" "Bitstream Vera Sans Mono" "Luc""ida Console" \
  "Ubuntu Mono" "Mes""lo for Powerline" "Mes""lo LG M for Powerline" "Powerline Symbols" "Monospace" "monospace"
css+=".container{font-family:${fonts:1}}"

# patch otherwise missing line at terminal end
css+=".container>g{animation-play-state:running}"
css+=".container_end{fill:whitesmoke;mix-blend-mode:soft-light;opacity:0;transition:opacity .2s ease-in-out}"
css+=".container:hover>g{animation-play-state:paused}"
css+=".container{pointer-events:all}"
css+=".container:hover{cursor:wait}"
css+=".container:hover>.container_end{opacity:1}"
declare container_end='<svg height="100%" width="100%" viewBox="0 0 100 100" class="container_end">'
container_end+='<text text-anchor="middle" alignment-baseline="central">'
container_end+='<tspan y="50" x="50" style="font-size: 50px;">❚❚</tspan></text></svg>'
svg="${svg/%<\/g><\/svg><\/svg>/$container_end<\/g><\/svg><\/svg>}"

# patch otherwise missing line at terminal end
css+=".container>g>svg>svg>*{transform: scaleY(.95);}"

# write back SVG
printf '%s\n' "${svg/<style>/<style>$css}" >"$svg_file"

[ -e "$svg_file" ] || logr error --code "$EX_SOFTWARE" "svg-file '$svg_file' unexpectedly missing" --stacktrace
[ "${out_svg_file-}" = "$svg_file" ] || cp "$svg_file" "$out_svg_file"
[ ! "${out_svg_file-}" ] || [ "${flags['delete-build']:-false}" = false ] || rm -- "$svg_file" "$svg_file".*
[ "${flags['delete-build']:-false}" = false ] || rm -- "$recordable_file" "$cast_file"

# always print nice output to STDERR
echo " ${esc_green-}●${esc_reset-} COMPLETED: ${esc_bold-}${out_svg_file#./}${esc_reset-}" >&2

# print completed file path to STDOUT if any output is redirected
{ [ -t 1 ] && [ -t 2 ]; } || echo "${out_svg_file#./}"
